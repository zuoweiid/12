name: x86_64                 ## Actions工作流的名称

on:
  repository_dispatch:       ## 工作流程_调度
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH远程 SSH connection to Actions'
        required: false
        default: 'false'

env:
  OPNAME: 'x86_64'                                   # 发布标签的名称
  REPO_URL: https://github.com/coolsnowwolf/lede     # 源码链接
  REPO_BRANCH: master                                # 源码分支
  FEEDS_CONF: feeds.conf.default                     # feeds 插件源
  EXTERNAL_FILE: configs/LuciApp.config              # 通用插件App
  CONFIG_FILE: configs/x86_64.config                 # 机型配置
  SYS_CONF_SH: configure.sh                          # 自定义配置 configure.sh
  PACKS: package.sh                                  # 下载第三方插件 package.sh
  UPLOAD_BIN_DIR: false                              # 是否上传Bin目录
  UPLOAD_FIRMWARE: true                              # 是否上传固件
  UPLOAD_RELEASE: true                               # 是否发布固件
  TZ: Asia/Shanghai                                  # 时区

jobs:
  build:
    runs-on: ubuntu-20.04                            ## ←选择编译系统版本

    steps:
    - name: 准备环境                                 ## Checkout
      uses: actions/checkout@main                    ## 开始运行脚本，之前都是准备工作 加载变量值

    - name: 安装编译环境                             ## Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive              ## 非交互模式
      run: |
        pwd && ls
        
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL https://raw.githubusercontent.com/bigbugcc/openwrts/master/openwrt-env)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 可用磁盘空间                              ## Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true                               ## 工具缓存
        android: true                                  ## 安卓
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: true

    - name: 下载Lede源码                               ## Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 缓存                                        ## Cache
      uses: klever1988/cachewrtbuild@main
      with:
          ccache: 'true'
          mixkey: 'x86'
          prefix: 'openwrt'

    - name: 加载DIY自定义（configure.sh脚本）                               ## Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $SYS_CONF_SH
        cd openwrt
        $GITHUB_WORKSPACE/$SYS_CONF_SH

    - name: 更新feeds                                    ## Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装feeds                                    ## Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载DIY配置（package.sh脚本）                                  ## Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $PACKS
        cd openwrt
        $GITHUB_WORKSPACE/$PACKS

    - name: 修改配置（.config配置）                                      ## Modify configuration
      run: |
        cat $EXTERNAL_FILE >> openwrt/.config
        cd openwrt && make defconfig
        sed -i '/CONFIG_DEFAULT_luci/'d .config
        cat .config

    - name: SSH 连接                                      ## SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 下载DL库                                      ## Download package
      id: package
      run: |
        cd openwrt
        # make download -j$(nproc)   # 先取消
        make download -j8            # 测试
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 开始编译固件                                   ## Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) V=s || make -j4 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 检查空间使用情况                               ## Check space usage
      if: (!cancelled())
      run: df -hT

    - name: 上传bin目录                                   ## Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理文件                                     ## Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件目录                                 ## Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签                                 ## Generate release tag
      id: tag
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "== Time：$(date +'%Y-%m-%d %H:%M:%S') =="
        echo "release_tag=$(date +"%Y.%m.%d-%H%M%S")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件发布                                  ## Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}         ## REPO_TOKEN = 令牌值
      with:
        name: ${{ env.OPNAME }}
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
